; https://docs.platformio.org/en/latest/platforms/espressif32.html

[env]
build_flags =
    ; to use e.g. as part of the firmware name 
    '-DPIOENV="${PIOENV}"'
 
    ; coding_standards
    -Wno-unused-variable
    -Wno-unused-but-set-variable
    -Wunreachable-code

    ; debug level 5=VERBOSE https://docs.platformio.org/en/latest/platforms/espressif32.html#debug-level
    ;  -DCORE_DEBUG_LEVEL=5
extra_scripts = pre:extra_script.py
framework = arduino
lib_deps =
    ; place global libs here or under extra.lib_deps_external (see below)
monitor_speed = 115200
platform = espressif32
upload_speed = 921600

; CUSTOM options
; You need manually inject these options into a section
; using ${extra.<name_of_option>} (see below)
[extra]
; https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-guides/external-ram.html
build_flags_psram =
    -DBOARD_HAS_PSRAM
    -mfix-esp32-psram-cache-issue ; https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-guides/external-ram.html#esp32-rev-v1
lib_deps_builtin =
  SPI
  Wire
lib_deps_external =
    ; extend libs for all platforms here

[esp32]
build_flags =
    ${env.build_flags}
lib_deps =
    ${env.lib_deps}
    ${extra.lib_deps_builtin}
    ${extra.lib_deps_external}
    ; extend libs only for esp32 based modules here

[esp32s2]
build_flags =
    ${env.build_flags}
lib_deps =
    ${env.lib_deps}
    ${extra.lib_deps_builtin}
    ${extra.lib_deps_external}
    ; extend libs only for esp32s2 based modules here

[esp32s3]
build_flags =
    ${env.build_flags}
lib_deps =
    ${env.lib_deps}
    ${extra.lib_deps_builtin}
    ${extra.lib_deps_external}
    ; extend libs only for esp32s3 based modules here


; *********
; * ESP32 *
; *********

; https://docs.platformio.org/en/latest/platforms/espressif32.html
[env:esp32dev]
extends = esp32
board = esp32dev
build_flags =
    ${esp32.build_flags}
lib_deps =
    ${esp32.lib_deps}

; https://docs.platformio.org/en/latest/boards/espressif32/lolin32.html
[env:lolin32]
extends = esp32
board = lolin32
build_flags =
    ${esp32.build_flags}
lib_deps =
    ${esp32.lib_deps}

; https://docs.platformio.org/en/latest/boards/espressif32/lolin_d32_pro.html
; https://www.wemos.cc/en/latest/d32/d32_pro.html
[env:lolin-d32-pro]
extends = esp32
board = lolin_d32_pro
build_flags =
    ${esp32.build_flags}
    ${extra.build_flags_psram} ; 4MB PSRAM
lib_deps =
    ${esp32.lib_deps}

; https://www.lilygo.cc/products/t-beam-v1-1-esp32-lora-module
[env:ttgo-t-beam]
extends = esp32
board = ttgo-t-beam
build_flags =
    ${esp32.build_flags}
    ${extra.build_flags_psram} ; 8MB PSRAM
lib_deps =
    ${esp32.lib_deps}

; ************
; * ESP32-S2 *
; ************

; TODO http://www.lilygo.cn/prod_view.aspx?TypeId=50033&Id=1321 with psram
; https://github.com/Xinyuan-LilyGO/LilyGo-T-Display-S2
[env:lilygo-t-display-s2]
extends = esp32s2
board = esp32dev ; platformio board support?


; ************
; * ESP32-S3 *
; ************

; https://docs.platformio.org/en/latest/boards/espressif32/esp32s3box.html
[env:esp32s3box]
extends = esp32s3
board = esp32s3box
build_flags =
    ${esp32s3.build_flags}
lib_deps =
    ${esp32s3.lib_deps}

; https://docs.platformio.org/en/latest/boards/espressif32/esp32-s3-devkitc-1.html
[env:esp32-s3-devkitc-1]
extends = esp32s3
board = esp32-s3-devkitc-1
build_flags =
    ${esp32s3.build_flags}
    ; PSRAM is optional
lib_deps =
    ${esp32s3.lib_deps}

; https://docs.platformio.org/en/latest/boards/espressif32/lilygo-t-display-s3.html
; https://www.lilygo.cc/products/t-display-s3
; https://github.com/Xinyuan-LilyGO/T-Display-S3
[env:lilygo-t-display-s3]
board = lilygo-t-display-s3
build_flags =
    ${esp32s3.build_flags}
    ${extra.build_flags_psram} ; 8MB PSRAM
lib_deps =
    ${esp32s3.lib_deps}

; https://www.antratek.com/wt32-sco1-plus
; https://www.seeedstudio.com/WT32-3-5-Inch-Display-p-5542.html
[env:wt32-sc01-plus]
extends = env:esp32-s3-devkitc-1
build_flags =
    ${env:esp32-s3-devkitc-1.build_flags}
    ${extra.build_flags_psram} ; 2MB PSRAM
